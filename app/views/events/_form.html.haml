- eventResult = event.results.build
- nameArray = []
- User.all.each do |user|
  - nameArray << user.name

= form_for eventResult, :url => event_results_path(event), :remote => false, :html => { :id => "event_result_#{event.id}", :autocomplete => "off", :class => 'form-inline', :role=>'form'} do |f|
  .form-group.col-md-2
    = f.label :username, :class=>'sr-only' 
    = f.text_field :username, :class => 'typeahead form-control', :placeholder => t(:name).capitalize, :size=>'40'
  .form-group.col-md-2
    = f.label :result, :class=>'sr-only'
    = f.text_field :result, :class=>'form-control', :placeholder => "Prestatie", :size=>'40'
  - if event.eventtype.show_wind
    .form-group.col-md-2
      = f.label :wind, :class=>'sr-only'
      = f.text_field :wind, :class=>'form-control', :placeholder => "m/s", :size=>'40'
  .form-group.col-md-2
    = f.label :place, :class=>'sr-only'
    = f.text_field :place, :class=>'form-control', :placeholder => "Plaats", :size=>'40'
  .col-md-2
    = f.submit :class => "btn btn-default"
  :javascript
    var substringMatcher = function(strs) {
      return function findMatches(q, cb) {
      var matches, substringRegex;
       
      // an array that will be populated with substring matches
      matches = [];
       
      // regex used to determine if a string contains the substring `q`
      substrRegex = new RegExp(q, 'i');
       
      // iterate through the pool of strings and for any string that
      // contains the substring `q`, add it to the `matches` array
      $.each(strs, function(i, str) {
      if (substrRegex.test(str)) {
      // the typeahead jQuery plugin expects suggestions to a
      // JavaScript object, refer to typeahead docs for more info
      matches.push({ value: str });
      }
      });
       
      cb(matches);
      };
    };
     
    var states = #{nameArray};
     
    $('#event_result_#{event.id} .typeahead').typeahead({
      hint: true,
      highlight: true,
      minLength: 1
      },
      {
      name: 'states',
      displayKey: 'value',
      source: substringMatcher(states)
    });


