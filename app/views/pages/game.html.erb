<%= javascript_include_tag "helpers" %>
<style>
canvas {
	background-color: #000;
	display: block;
	position: relative;
	margin: auto;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
}
</style>
<script>
var left = 10;
var display, input, frames,sp,lvFrame;
var taSprite,beSprite,haSprite,woSprite;
var dir,tank,bullets,enemies,wortels;
var nEnemies = 0;
var maxEnemies = 11;
var canbullet = true;
var enemyTimer = 1800;
var wortelTimer = 3000;
var lives = 3;
var points = 0;
var enemyspeed = 1;
var screen = 0;
var startgame = false;
var highscore = 0;
var ind = 0;
var scores = "<%= @results.find_by(user_id: current_user.try(:id)).try(:result)%>";
var records2 = JSON.parse("<%= @results.sort_by(&:result).reverse.first(50).map(&:result)%>".replace(/&quot;/g,'"'));
var holders2 = JSON.parse("<%= @results.sort_by(&:result).reverse.first(50).map(&:username)%>".replace(/&quot;/g,'"'));
function main () {
	records = [];
	holders = [];
	for(i=0; i<records2.length; i++){
		records[i] = parseInt(records2[i]);
	}
	records2 = records.slice(0);
	records.sort(function(a, b){return a-b}).reverse();
	
	for(i=0; i<records.length; i++) {
	holders[i] = holders2[records2.indexOf(records[i])];
	holders2.splice(records2.indexOf(records[i]),1);
	records2.splice(records2.indexOf(records[i]),1);
	}
	if (scores!== "") {
		highscore=parseInt(scores);
	}
	ScoreCarrousel();
	//Disable the page from scrolling
	document.documentElement.style.overflow = "hidden";
	
	//initialize screen and input
	display = new Screen();
	input = new InputHandler();
	
	//create Sprites
	var imgt = new Image();
	imgt.src = '<%= asset_path 'kegel.png' %>';
	taSprite = new Sprite(imgt,0,0,30,17);
	
	var imgb = new Image();
	imgb.src = '<%= asset_path 'bier.png' %>';
	beSprite = new Sprite(imgb,0,0,13,14);
	
	var imgh = new Image();
	imgh.src = '<%= asset_path 'haas.png' %>';
	haSprite = new Sprite(imgh,0,0,23,23);
	
	var imgw = new Image();
	imgw.src = '<%= asset_path 'wortel.png' %>';
	woSprite = new Sprite(imgw,0,0,9,14);
	
	startScreen();
};

function ScoreCarrousel() {
	var indmax = holders.length;
	ind = (ind+1)%indmax;
	setTimeout(ScoreCarrousel,1000);
}
function startScreen() {
	var loop = function() {
	    if (screen==0) {
          GameSelector();
          UpdateSelector();
      }
      if (screen==1) {
          renderStart();
          updateStart()
      }

      if (screen==2) {
          renderDino();
          updateDino();
      }

		  if (startgame == false) {
			  window.requestAnimationFrame(loop,display.canvas);
		  }
		  else if (screen==3) {
          startKegelRun();
      }
		  else {
			  init();
			  run();
		  }
	};
	window.requestAnimationFrame(loop,display.canvas);
}

function GameSelector() {
    display.canvas.height = 400;
    display.canvas.width = 400;

    let ctx = display.canvas.getContext('2d');

    //Draw Canvas Fill mode
    ctx.fillStyle = 'Aquamarine';
    ctx.fillRect(0,0,display.canvas.width, display.canvas.height);
    display.drawText("Black","40px Arial","Webcie Games :D",45,50);

    var imgPI = new Image();
    imgPI.src = '<%= asset_path 'Pilscie-Invaders.jpg' %>';
    PISprite = new Sprite(imgPI,0,0,100,100);
    display.drawSprite(PISprite,45,80);
    display.drawText("Black","12px Arial","Pilscie Invaders",48,200);

    display.drawRect("White","Black",2,255,80,100,100);
    display.drawText("Black","90px Arial","?",277,160);
    display.drawText("Black","12px Arial","Under construction",255,200);
}

function UpdateSelector() {
    if (input.clickx-display.canvas.getBoundingClientRect().left>45 && input.clickx-display.canvas.getBoundingClientRect().left<145 && input.clicky-display.canvas.getBoundingClientRect().top>80 && input.clicky-display.canvas.getBoundingClientRect().top<180) {
        screen=1;
        input.clickx=9999;
    }
    if (input.clickx-display.canvas.getBoundingClientRect().left>255 && input.clickx-display.canvas.getBoundingClientRect().left<355 && input.clicky-display.canvas.getBoundingClientRect().top>80 && input.clicky-display.canvas.getBoundingClientRect().top<180) {
      if("<%= current_user.id%>" == "2") {
          screen = 2;
          input.clickx = 9999;
      }
      else{
          window.location.href = 'https://www.youtube.com/watch?v=bZeemepTOks';
          input.clickx = 9999;
      }
    }
}

function renderStart() {
	display.canvas.height = 400;
	display.canvas.width = 400;
	display.drawText("Green","40px Arial","Pilscie Invaders",65,50);
	display.drawText("Green","25px Arial","Highscore: "+String(highscore),120,80);
	display.drawRect("CadetBlue","Coral",2,65,100,275,45);
	display.drawRect("CadetBlue","Coral",2,65,160,275,45);
	display.drawRect("CadetBlue","Coral",2,370,0,30,30);
	display.drawRect("CadetBlue","Coral",2,65,220,275,60);
	display.drawRect("CadetBlue","Coral",2,0,0,63,30);
	display.drawText("Black","20px Arial","Normal Mode",140,130);
	display.drawText("Black","20px Arial","Expert Mode",140,190);
	display.drawText("Black","20px Arial","?",380,23);
	display.drawText("Black","20px Arial",String(ind+1)+": "+holders[ind],70,240);
	display.drawText("Black","20px Arial","Highscore: "+records[ind],70,265);
	display.drawText("Black","20px Arial","Back",7,20);
}

function updateStart() {
    if (input.clickx-display.canvas.getBoundingClientRect().left>0 && input.clickx-display.canvas.getBoundingClientRect().left<63 && input.clicky-display.canvas.getBoundingClientRect().top>0 && input.clicky-display.canvas.getBoundingClientRect().top<30) {
        screen=0;
    }
	if (input.clickx-display.canvas.getBoundingClientRect().left>65 && input.clickx-display.canvas.getBoundingClientRect().left<340 && input.clicky-display.canvas.getBoundingClientRect().top>100 && input.clicky-display.canvas.getBoundingClientRect().top<145) {
	startgame = true;
	}
	if (input.clickx-display.canvas.getBoundingClientRect().left>65 && input.clickx-display.canvas.getBoundingClientRect().left<340 && input.clicky-display.canvas.getBoundingClientRect().top>160 && input.clicky-display.canvas.getBoundingClientRect().top<205) {
	input.clickx = 0;
	input.clicky = 0;
	if(highscore <100) {
	alert("you need to score at least 100 points in normal mode to unlock this!");
	}
	else {
	window.location.href = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';
	}
	}
	if (input.clickx-display.canvas.getBoundingClientRect().left>370 && input.clickx-display.canvas.getBoundingClientRect().left<400 && input.clicky-display.canvas.getBoundingClientRect().top>0 && input.clicky-display.canvas.getBoundingClientRect().top<30) {
	alert("Play as Kegel and save Kronos from the evil rabbits. We'll let you figure out how to play the game by yourself. (hint: use spacebar or just try to click somewhere)");
	input.clickx = 0;
	input.clicky = 0;
	}
}

function renderDino() {
    display.canvas.height = 400;
    display.canvas.width = 400;

    display.drawText("Green","40px Arial","Run Kegel Run",75,50);
    display.drawRect("CadetBlue","Coral",2,65,100,275,45);
    display.drawRect("CadetBlue","Coral",2,370,0,30,30);
    display.drawRect("CadetBlue","Coral",2,65,220,275,60);
    display.drawRect("CadetBlue","Coral",2,0,0,63,30);

    display.drawText("Black","20px Arial","Start Running",140,130);
    display.drawText("Black","20px Arial","?",380,23);
    display.drawText("Black","20px Arial","Back",7,20);
}

function updateDino(){
    if (input.clickx-display.canvas.getBoundingClientRect().left>0 && input.clickx-display.canvas.getBoundingClientRect().left<63 && input.clicky-display.canvas.getBoundingClientRect().top>0 && input.clicky-display.canvas.getBoundingClientRect().top<30) {
        screen=0;
    }

    if (input.clickx-display.canvas.getBoundingClientRect().left>370 && input.clickx-display.canvas.getBoundingClientRect().left<400 && input.clicky-display.canvas.getBoundingClientRect().top>0 && input.clicky-display.canvas.getBoundingClientRect().top<30) {
        alert("Play as Kegel and try to run as far as possible. But watch out, tracks can be dangerous places!");
        input.clickx = 9999;
    }

    if (input.clickx-display.canvas.getBoundingClientRect().left>65 && input.clickx-display.canvas.getBoundingClientRect().left<340 && input.clicky-display.canvas.getBoundingClientRect().top>100 && input.clicky-display.canvas.getBoundingClientRect().top<145) {
        screen=3;
        startgame=true;
        input.clickx = 9999;
    }
}

function startKegelRun(){

    //initialize clouds
    clouds = [];
    hurdles = [];
    javelins = [];
    run=true;
    duck=false;
    jump=false;
    kegelindex = 0;
    kegeldindex = 0;
    kegelx = 30;
    kegely = 260;
    kegelvely = 0;
    updatetime=5;
    gravity = 0.3;

    //cloud sprites
    var ImgCloud = new Image();
    ImgCloud.src = '<%= asset_path 'cloud.png' %>';
    ClSprite = new Sprite(ImgCloud,0,0,130,53);

    var ImgCloud2 = new Image();
    ImgCloud2.src = '<%= asset_path 'cloud2.png' %>';
    Cl2Sprite = new Sprite(ImgCloud2,0,0,130,53);

    //Background sprite
    var ImgBg = new Image();
    ImgBg.src = '<%= asset_path 'Track-Background.png' %>';
    BgSprite = new Sprite(ImgBg,0,0,400,400);

    //Kegel sprites
    var ImgK1 = new Image();
    ImgK1.src = '<%= asset_path 'kegel1.png' %>';
    K1Sprite = new Sprite(ImgK1,0,0,64,92);

    var ImgK2 = new Image();
    ImgK2.src = '<%= asset_path 'kegel2.png' %>';
    K2Sprite = new Sprite(ImgK2,0,0,64,92);

    var ImgK3 = new Image();
    ImgK3.src = '<%= asset_path 'kegel3.png' %>';
    K3Sprite = new Sprite(ImgK3,0,0,64,92);

    var ImgKD1 = new Image();
    ImgKD1.src = '<%= asset_path 'kegel-duck1.png' %>';
    KD1Sprite = new Sprite(ImgKD1,0,0,76,61);

    var ImgKD2 = new Image();
    ImgKD2.src = '<%= asset_path 'kegel-duck2.png' %>';
    KD2Sprite = new Sprite(ImgKD2,0,0,76,61);

    //hurdle sprite
    var ImgH = new Image();
    ImgH.src = '<%= asset_path 'hurdle.png' %>';
    HSprite = new Sprite(ImgH,0,0,48,84);

    //javelin sprite
    var ImgJ = new Image();
    ImgJ.src = '<%= asset_path 'javelin.png' %>';
    JSprite = new Sprite(ImgJ,0,0,152,20);

    //add first two clouds
    clouds.push(new Cloud(260,10,-0.5,false));
    clouds.push(new Cloud(100,30,-0.5,false));

    //ad first hurdle (remove later)
    setTimeout(createObstacles,500);
    var loop = function() {

        renderKegelRun()
        updateKegelRun();

        if (screen==3) {
            window.requestAnimationFrame(loop,display.canvas);
        }
        else {
            startScreen();
        }

    };
    window.requestAnimationFrame(loop,display.canvas);
}

function createObstacles(){
    if (Math.random()<0.25){
        javelins.push(new Javelin(400,268,-3));
    }
    else {
        hurdles.push(new Hurdle(400,268,-3));
    }
    setTimeout(createObstacles,2000);
}
function renderKegelRun(){

    display.canvas.height = 400;
    display.canvas.width = 400
    //draw background
    display.drawSprite(BgSprite,0,0);

    //draw Kegel animation
    if (run==true) {

    if (kegelindex==0){
        display.drawSprite(K1Sprite,kegelx,kegely);
    }
    else if (kegelindex==1){
        display.drawSprite(K2Sprite,kegelx,kegely);
    }
    else if (kegelindex==2){
        display.drawSprite(K3Sprite,kegelx,kegely);
    }
    }

    if (duck==true){
        if (kegeldindex==0){
            display.drawSprite(KD1Sprite,kegelx,kegely+31);
        }
        else {
            display.drawSprite(KD2Sprite,kegelx,kegely+31);
        }

    }
    else if (jump==true){
        display.drawSprite(K1Sprite,kegelx,kegely);
    }


    //draw cloud animation
    for (var i=0, len=clouds.length; i<len; i++){
        c= clouds[i];
        if (c.cool==true){
            display.drawSprite(Cl2Sprite,c.x,c.y);
        }
        else{
            display.drawSprite(ClSprite,c.x,c.y);
        }
    }

    //draw hurdles
    for (var i=0, len=hurdles.length; i<len; i++){
        h= hurdles[i];
        display.drawSprite(HSprite,h.x,h.y);
    }

    //draw javelins
    for (var i=0, len=javelins.length; i<len; i++){
        j= javelins[i];
        display.drawSprite(JSprite,j.x,j.y);
    }
}

function updateKegelRun(){
    //update Kegel movement
    if (updatetime==0) {
        kegeldindex = ((kegeldindex+1) %2);
        kegelindex = ((kegelindex+1) % 3);
        updatetime=5;
    }
    else {
        updatetime-=1;
    }

    //update Cloud positions
    for (var i=0, len=clouds.length; i<len; i++){
        c= clouds[i];
        c.x +=c.velx;

        //remove clouds outside of the screen
        if(c.x<-130) {
            clouds.splice(i, 1);
            i--;
            if (Math.random() < 0.1) {
              clouds.push(new Cloud(400, c.y, -0.5, true));
            }
            else {
              clouds.push(new Cloud(400, c.y, -0.5, false));
            }

            continue;
        }
    }

    //update hurdle positions
    for (var i=0, len=hurdles.length; i<len; i++) {
        h= hurdles[i];
        h.x +=h.velx;
        if(h.x<-48) {
            hurdles.splice(i, 1);
            i--;
            len--;
        }
    }

    //update javelin positions
    for (var i=0, len=javelins.length; i<len; i++) {
        j= javelins[i];
        j.x +=j.velx;
        if(j.x<-152) {
            javelins.splice(i, 1);
            i--;
            len--;
        }
    }

    //jump control
    if ((input.isPressed(32) || input.isPressed(38)) && jump==false && duck==false){
        jump = true;
        run=false;
        kegelvely=-9;
    }

    //adjust jump position
    if (jump==true) {
        kegely+=kegelvely;
        kegelvely+=gravity;
        if (kegely>260){
            kegely=260;
            jump=false;
            run=true;
            kegelvely=0;
            gravity = 0.3;
        }
    }

    //duck control
    if (input.isDown(40) && jump==true){
        gravity = 1;
    }
    if (input.isDown(40) && jump==false){
        duck=true;
        run=false;
    }
    else if (jump==false){
        duck=false;
        run=true;
    }

}
function init() {
	frames = 0;
	//create the kegel
	tank = {
			sprite: taSprite,
			x: (400-taSprite.w)/2,
			y: 368
	};
	
	//initiate bullet array
	bullets = [];
	//initiate enemy array
	enemies = [];
	//initiate wortel array
	wortels = [];
	enemyTimer = 1800;
	wortelTimer = 3000;
	nEnemies = 0;
	enemyspeed = 1;
	lives = 3;
	points = 0;
	createEnemies();
};

function createEnemies() {
	if (startgame == true) {
	nEnemies++;
	if (nEnemies<maxEnemies) {
		enemies.push(new Enemy(3+30*nEnemies,30,enemyspeed,0));
		setTimeout(createEnemies,500);
	}
	else if (nEnemies==maxEnemies) {
		enemies.push(new Enemy(3+30*nEnemies,30,enemyspeed,0));
		setTimeout(createWortels,wortelTimer*Math.random());
		setTimeout(createEnemies,enemyTimer);
	}
	else {       
		enemies.push(new Enemy(3,30,enemyspeed,0)); 
		setTimeout(createEnemies,enemyTimer);
		enemyTimer*=0.99;
	}
	}
};

function createWortels() {
	if (enemies.length!==0 && startgame == true){
	var i = Math.round((enemies.length-1)*Math.random());
	wortels.push(new Bullet(enemies[i].x,enemies[i].y+23,1));
	setTimeout(createWortels,wortelTimer*Math.random());
	}
}

function CanBullet() {
	canbullet = true;
}

function checkCollisions() {
	for (var i=0,lenb = bullets.length; i<lenb; i++) {
		for (var j=0, lene = enemies.length; j<lene; j++) {
			if (bullets[i].y<enemies[j].y+23 && bullets[i].x<enemies[j].x+23 && bullets[i].x>enemies[j].x-13) {
				points++;
				if (points % 10 == 0) {
				wortelTimer*=0.9;
				}
				if (points % 20 == 0) {
					enemyspeed*=1.1;
					for (var k=0, lenk = enemies.length; k<lenk; k++) {
					enemies[k].velx=Math.sign(enemies[k].velx)*enemyspeed;
					}
				}
				bullets.splice(i,1);
				enemies.splice(j,1);
				i--;
				lenb--;
				j--;
				lene--; 
				break;
			}
		}
	}
	
	for (var k=0, lenw = wortels.length; k<lenw; k++) {
		if(wortels[k].y>354 && wortels[k].x<tank.x+30 && wortels[k].x>tank.x-9) {
		lives-=1;
		wortels = [];  
		for (var l=0, lenl = enemies.length; l<lenl; l++) {
			if(enemies[l].y>200) {
			enemies.splice(l,1);
			l--;
			lenl--;
			continue;
			}
		}
		break;
		}
		if (lives==0 && startgame == true) {
		alert("Game Over")
		if(points > highscore){
		SubmitScore();
		}
		clearTimeout(createEnemies);
		clearTimeout(createWortels);
		input.clickx = 0;
		input.clicky = 0;
		startgame = false;
		window.location.href = window.location.origin+"/Game";
		break;
		}
	}
	for (var j=0, lene = enemies.length; j<lene; j++) {
		if(enemies[j].y>345 && enemies[j].x<tank.x+30 && enemies[j].x>tank.x-23) {
		lives-=1;
		wortels = [];
		for (var l=0, lenl = enemies.length; l<lenl; l++) {
			if(enemies[l].y>200) {
			enemies.splice(l,1);
			l--;
			lenl--;
			continue;
			}
		}
		break;
		}
		if (lives==0 && startgame == true) {
		alert("Game Over")
		if(points > highscore){
		SubmitScore();
		}
		clearTimeout(createEnemies);
		clearTimeout(createWortels);
		input.clickx = 0;
		input.clicky = 0;
		startgame = false;
		window.location.href = window.location.origin+"/Game";
		break;
		}
	}
}

function SubmitScore(){
	var ding = "<%= @results.find_by(user_id: current_user.try(:id)).try(:id)%>"
	if (ding !== "") {
	$.ajax({
		url: window.location.origin+"/results/"+ding,
		type: 'delete',
		data: {
			id: parseInt(ding),
		},
		dataType: "JSON",
		success: function(data) {
        }
     });
	}
	if ("<%= current_user.try(:name)%>" !== ""){
	$.ajax({
		url: window.location.origin+"/results",
		type: 'POST',
		data: {
			result: {
				username: "<%= current_user.try(:name)%>",
				result: String(points),
				user_id: "<%= current_user.try(:id)%>",
			}
		},
		dataType: "JSON",
		success: function(data) {
        }
     });
	 }
	 highscore = points;
}

function drawStats() {
	display.drawRect("AliceBlue","AliceBlue",0,0,0,400,30);
	display.drawRect("AliceBlue","black",2,0,0,60,30);
	display.drawText("red","20px Arial","Lives: ",155,20);
	display.drawText("red","20px Arial",String(lives),210,20);
	display.drawText("red","20px Arial","Points: ",290,20);
	display.drawText("red","20px Arial",String(points),355,20);
	display.drawText("black","20px Arial","Quit",9,22);
}

function run () {
	var loop = function() {
		update();
		render();
		if (startgame == true) {
			window.requestAnimationFrame(loop,display.canvas);
		}
		else {
			startScreen();
		}
	};
	window.requestAnimationFrame(loop,display.canvas);
};

function update() {
	frames++;
	//check quit button
	if (input.clickx-display.canvas.getBoundingClientRect().left>0 && input.clickx-display.canvas.getBoundingClientRect().left<60 && input.clicky-display.canvas.getBoundingClientRect().top>0 && input.clicky-display.canvas.getBoundingClientRect().top <30) {
		clearTimeout(createEnemies);
		clearTimeout(createWortels);
		startgame = false;
		input.clickx = 9999;
	}
if (nEnemies>=maxEnemies) {
	if (input.isDown(37)|| input.isDown(65)) {
		tank.x -=1;
	}
	if (input.isDown(39) || input.isDown(68)) {
		tank.x +=1;
	}
	if(input.clicked == true) {
	if(input.mousey-display.canvas.getBoundingClientRect().top>300 && input.mousex-display.canvas.getBoundingClientRect().left<150) {
		tank.x -=1;
	}
	else if(input.mousey-display.canvas.getBoundingClientRect().top>300 && input.mousex-display.canvas.getBoundingClientRect().left>250) {
		tank.x +=1;
	}
	}
	
	tank.x = Math.max(Math.min(tank.x,display.canvas.width -taSprite.w),10);
	tank.y = display.canvas.height-32
	
	//create a new bullet when space is pressed
	if ((input.isPressed(32) || (input.clicky-display.canvas.getBoundingClientRect().top>300 && input.clickx-display.canvas.getBoundingClientRect().left>150 && input.clickx-display.canvas.getBoundingClientRect().left<250)) && canbullet == true) {
		bullets.push(new Bullet(tank.x + 10,tank.y,-2));
		setTimeout(CanBullet,1000);
		canbullet = false;
		input.clickx = 10000;
		input.clicky = 10000;
	}
	
		
	//update bullet positions
	for (var i=0, len = bullets.length; i <len; i++) {
		var b = bullets[i];
		b.update();
		//remove bullets outside of the screen
		if(b.y<30) {
			bullets.splice(i,1);
			i--;
			len--;
			continue;
		}
	}
	
	//update rabbit positions
	for (var j=0, len = enemies.length; j<len; j++) {
		var e = enemies[j];
		e.update();
		//shift enemies
		if (e.x>380 || e.x<0) {
		e.y+=30;
		e.velx*=-1;
		}
	}
	
	//update wortel positions
	for (var k=0, len=wortels.length; k<len; k++) {
		var w = wortels[k];
		w.update();
		//remove wortels outside of the screen
		if(w.y>400) {
		wortels.splice(k,1);
		k--;
		len--;
		continue;
		}
	}
	checkCollisions();
}

};

function render() {
	display.canvas.height = 400;
	display.canvas.width = 400
	display.drawSprite(tank.sprite,tank.x,tank.y);
	for (var i=0, len=bullets.length; i<len; i++){
		b = bullets[i];
		display.drawSprite(beSprite,b.x,b.y);
	}
	for (var j=0, len=enemies.length; j<len; j++){
		e = enemies[j];
		display.drawSprite(haSprite,e.x,e.y);
	}
	for (var k=0, len=wortels.length; k<len; k++){
		w = wortels[k];
		display.drawSprite(woSprite,w.x,w.y);
	}
	drawStats();
};
main();
</script>